#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative 'helper'

class CLI
  def initialize
    @options = {}
    @parser = create_option_parser
  end

  def run(args)
    @parser.parse!(args)

    if @options[:demo]
      run_demo
    elsif args.empty?
      process_source_directory
    else
      process_single_file(args[0], args[1])
    end
  rescue StandardError => e
    puts "Error: #{e.message}"
    exit 1
  end

  private

  def create_option_parser
    OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options] [input_file] [output_file]"

      opts.separator ''
      opts.separator 'Options:'

      opts.on('--demo', 'Run demo with sample RBS file') do
        @options[:demo] = true
      end

      opts.on('-h', '--help', 'Show this help') do
        puts opts
        puts ''
        puts CLIHelper.create_help_text($PROGRAM_NAME)
        exit
      end
    end
  end

  def run_demo
    rbs_files = CLIHelper.validate_demo_directory
    puts CLIHelper.demo_header(rbs_files.length)
    puts CLIHelper.demo_generation

    result = RBSToDiagram.execute(CLIHelper::DEMO_INPUT_DIR, 'output/demo.mermaid')
    puts CLIHelper.generation_success(result[:output_file])
    puts CLIHelper.mermaid_viewer_info(result)
    puts CLIHelper.demo_completion(result[:output_file])
  end

  def process_source_directory
    rbs_files = CLIHelper.validate_source_directory
    puts CLIHelper.source_processing(rbs_files.length)

    rbs_files.each do |input_file|
      result = RBSToDiagram.execute(input_file, nil)
      puts CLIHelper.generation_success(result[:output_file])
    rescue StandardError => e
      puts CLIHelper.generation_error(input_file, e.message)
    end
  end

  def process_single_file(input_file, output_file)
    CLIHelper.validate_input_file(input_file)

    result = RBSToDiagram.execute(input_file, output_file)
    puts CLIHelper.single_file_success(result[:output_file])
  end
end

CLI.new.run(ARGV)
