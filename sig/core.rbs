
# RBS to Diagram - パッケージ間インターフェース定義
#
# このファイルは各パッケージ間の契約を定義します。
# 各パッケージのエントリーポイントと、パッケージ間でやり取りするデータ型を明示しています。
#
# パッケージ構成:
# - RBSParser: RBSファイルの解析を担当 (詳細: sig/rbs_parser.rbs)
# - Formatter: 解析結果の出力形式変換を担当 (詳細: sig/formatter.rbs)  
# - Result: パッケージ間で共有するデータクラス (詳細: sig/result.rbs)
#
# 依存関係:
# RBSParser -> Result <- Formatter

# 基底インターフェース
interface _BaseResult
  def find_nodes: () -> Array[_Node]
end

# Parser用インターフェース
interface _ParserResult
  include _BaseResult
  def each: () { (_Node) -> void } -> void
  def namespace_entity_types: () -> Array[Symbol]?
end

# Formatter用インターフェース
interface _FormatterResult
  include _ParserResult
end




class Parameter
  attr_reader name: String
  attr_reader type: String
  attr_reader kind: String

  def initialize: (name: String, type: String, kind: String) -> void
  def self.from_hash: (Hash[Symbol, String] hash) -> Parameter
  def to_hash: () -> { kind: String, name: String, type: String }
end



# RBS解析結果を集約するデータクラス（パブリックインターフェースのみ）
class Result
  include _ParserResult
  include _FormatterResult
  
  type definition_hash = Hash[Symbol, untyped]

  def self.build: (Array[definition_hash] definitions) -> (_ParserResult | _FormatterResult)

  private

  def initialize: (definitions: Array[definition_hash]) -> void

  #詳細はresult.rbsを参照
end


class RBSToDiagram
  type execute_result = {
    output_file: String,
    format_type: Symbol,
    content: String
  }

  def self.execute: (Array[String] | String input_paths, ?String? output_file) -> execute_result
  def initialize: (Array[String] | String input_paths, String? output_file) -> void
  def execute: () -> execute_result

  private

  @input_paths: Array[String]
  @output_file: String

  attr_reader input_paths: Array[String]
  attr_reader output_file: String

  def collect_rbs_files: (Array[String] paths) -> Array[String]
  def default_output_file_path: () -> String
  def add_timestamp_to_filename: (String file_path) -> String
  def determine_format_type: (String file_path) -> Symbol
end