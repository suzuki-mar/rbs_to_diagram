
class Formatter
  def self.format: (Result parser_result, ?Symbol format_type) -> String
  def initialize: () -> void
  def format: (Result parser_result, ?Symbol format_type) -> String

  private

  @json_formatter: Formatter::JSON
  @mermaidjs_formatter: Formatter::MermaidJS

  attr_reader json_formatter: Formatter::JSON
  attr_reader mermaidjs_formatter: Formatter::MermaidJS

  class JSON
    type json_block_hash = {
      parameters: Array[Hash[Symbol, String]],
      return_type: String
    }

    type json_method_hash = {
      name: String,
      method_type: String,
      visibility: String,
      parameters: Array[Hash[Symbol, String]],
      return_type: String,
      overloads: Array[Hash[Symbol, untyped]],
      block: json_block_hash?
    }

    type json_class_hash = {
      type: Symbol,
      name: String,
      superclass: String?,
      methods: Array[json_method_hash],
      includes: Array[String],
      extends: Array[String]
    }

    def format: (Result parser_result) -> String

    private

    def build_structure: (Result parser_result) -> Array[Hash[Symbol, untyped]]
    def convert_class_definition_to_hash: (Result::ClassNode class_def) -> Hash[Symbol, untyped]
    def convert_module_definition_to_hash: (Result::ModuleNode module_def) -> Hash[Symbol, untyped]
    def convert_method_to_hash: (Result::MethodNode method) -> Hash[Symbol, untyped]
    def convert_parameter_to_hash: (Parameter | Hash[Symbol, String] parameter) -> Hash[Symbol, String]
    def convert_block_to_hash: (Result::MethodNode::Block block) -> json_block_hash
  end

  class MermaidJS
    def format: (Result parser_result) -> String

    private

    @parser_result: Result

    attr_reader parser_result: Result

    def build_class_diagrams: () -> Array[String]
    def convert_class_to_mermaid: (Result::ClassNode class_def) -> Array[String]
    def convert_module_to_mermaid: (Result::ModuleNode module_def) -> Array[String]
    def convert_method_to_mermaid: (Result::MethodNode method) -> String
    def convert_module_method_to_mermaid: (Result::MethodNode method) -> String
    def convert_method_hash_to_mermaid: (Hash[Symbol, untyped] method_hash) -> String
    def format_parameters_from_hash: (Array[Hash[Symbol, untyped]] parameters) -> String
    def format_block_from_hash: (Hash[Symbol, untyped]? block_hash) -> String?
    def build_relationships: () -> Array[String]

    class Syntax
      def self.class_diagram_header: () -> String
      def self.class_definition: (String class_name, Array[String] methods) -> Array[String]
      def self.module_definition: (String module_name, Array[String] methods) -> Array[String]
      def self.inheritance_arrow: (String parent, String child, ?String? label) -> String
      def self.delegation_arrow: (String delegator, String delegatee, ?String? label) -> String
      def self.comment: (String text) -> String
      def self.method_signature: (visibility: String, static: bool, name: String, params: Array[String], block: String, return_type: String) -> String
      def self.format_method_parameters: (Result::MethodNode method) -> String
      def self.format_param: (Parameter param) -> String?
      def self.format_block_signature: (Result::MethodNode::Block? block) -> String
      def self.build_relationships: (Array[Result::RelationshipNode] relationships) -> Array[String]

      private

      def self.format_visibility: (String visibility) -> String
    end
  end
end