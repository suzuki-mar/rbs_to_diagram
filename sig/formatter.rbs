
# Formatter用インターフェース定義（Formatterパッケージが所有）
interface _FormatterResult
  include _FormatterBase
end

interface _FormatterResultMethod
  def name: () -> String
  def method_type: () -> String
  def visibility: () -> String
  def return_type: () -> String
  def parameters: () -> Array[Parameter]
  def overloads: () -> Array[Hash[Symbol, untyped]]
  def block: () -> Result::MethodNode::Block?
end

interface _FormatterResultNode
  def name: () -> String
  def type: () -> Symbol
  def methods_ordered_by_visibility_and_type: () -> Array[_FormatterResultMethod]
  def methods: () -> Array[_FormatterResultMethod]
  def is_a?: (Module) -> bool
  def relationships: () -> Array[Result::RelationshipNode]
  def includes: () -> Array[String]
  def extends: () -> Array[String]
end

interface _FormatterResultClassNode
  include _FormatterResultNode
  def superclass: () -> String?
end

class Formatter
  def self.format: (_FormatterResult parser_result, ?Symbol format_type) -> String
  def initialize: () -> void
  def format: (_FormatterResult parser_result, ?Symbol format_type) -> String

  private

  @json_formatter: Formatter::JSON
  @mermaidjs_formatter: Formatter::MermaidJS

  attr_reader json_formatter: Formatter::JSON
  attr_reader mermaidjs_formatter: Formatter::MermaidJS

  class JSON
    class Definition
      @type: untyped
      @name: untyped
      @superclass: untyped
      @methods: untyped
      @includes: untyped
      @extends: untyped
      @method_type: untyped
      @visibility: untyped
      @parameters: untyped
      @return_type: untyped
      @overloads: untyped
      @block: untyped
      @kind: untyped

      def initialize: (
        ?type: untyped,
        ?name: untyped,
        ?superclass: untyped,
        ?methods: untyped,
        ?includes: untyped,
        ?extends: untyped,
        ?method_type: untyped,
        ?visibility: untyped,
        ?parameters: untyped,
        ?return_type: untyped,
        ?overloads: untyped,
        ?block: untyped,
        ?kind: untyped
      ) -> void
      def to_hash: () -> Hash[Symbol, untyped]

      private

      def should_output_to_json?: (Symbol key, untyped value) -> bool
      def convert_value_for_hash: (untyped value) -> untyped
    end

    def format: (_FormatterResult parser_result) -> String

    private

    def build_structure: (_FormatterResult parser_result) -> Array[Hash[Symbol, untyped]]
    def convert_class_definition_to_data: (_FormatterResultClassNode class_def) -> Definition
    def convert_module_definition_to_data: (_FormatterResultNode module_def) -> Definition
    def convert_method_to_data: (_FormatterResultMethod method) -> Definition
    def convert_block_to_data: (Result::MethodNode::Block block) -> Definition
    def convert_parameters_to_definitions: (Array[Parameter | Hash[Symbol, String]] parameters) -> Array[Hash[Symbol, String]]
  end

  class MermaidJS
    def format: (_FormatterResult parser_result) -> String

    private

    @parser_result: _FormatterResult

    attr_reader parser_result: _FormatterResult

    def build_class_diagrams: () -> Array[String]
    def convert_node_to_mermaid: (_FormatterResultNode node) -> Array[String]
    def convert_class_to_mermaid: (Result::ClassNode class_def) -> Array[String]
    def convert_module_to_mermaid: (Result::ModuleNode module_def) -> Array[String]
    def convert_method_to_mermaid: (_FormatterResultMethod method, ?Symbol node_type) -> String
    def convert_module_method_to_mermaid: (Result::MethodNode method) -> String
    def convert_method_hash_to_mermaid: (Hash[Symbol, untyped] method_hash) -> String
    def format_parameters_from_hash: (Array[Hash[Symbol, untyped]] parameters) -> String
    def format_block_from_hash: (Hash[Symbol, untyped]? block_hash) -> String?
    def build_relationships: () -> Array[String]

    class Syntax
      def self.class_diagram_header: () -> String
      def self.class_definition: (String class_name, Array[String] methods) -> Array[String]
      def self.module_definition: (String module_name, Array[String] methods) -> Array[String]
      def self.inheritance_arrow: (String parent, String child, ?String? label) -> String
      def self.delegation_arrow: (String delegator, String delegatee, ?String? label) -> String
      def self.comment: (String text) -> String
      def self.method_signature: (visibility: String, static: bool, name: String, params: Array[String], block: String, return_type: String) -> String
      def self.format_method_parameters: (_FormatterResultMethod method) -> String
      def self.format_param: (Parameter param) -> String?
      def self.format_block_signature: (Result::MethodNode::Block? block) -> String
      def self.build_relationships: (Array[Result::RelationshipNode] relationships) -> Array[String]

      private

      def self.format_visibility: (String visibility) -> String
    end
  end
end