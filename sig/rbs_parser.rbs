# RBSParser用の型定義

class RBSParser
  @file_paths: Array[String]

  def self.parse: (Array[String] | String file_paths) -> _ParserResult
  def initialize: (Array[String] | String file_paths) -> void
  def parse: () -> _ParserResult

  private

  attr_reader file_paths: Array[String]

  def validate_file_exists?: (String file_path) -> bool
  def load_file_content: (String file_path) -> String
  class SignatureAnalyzer
    def self.analyze_content: (String content, String file_path) -> Array[untyped]
    def self.extract_class_declarations: (Array[untyped] declarations) -> Array[Hash[Symbol, untyped]]
    def self.extract_module_declarations: (Array[untyped] declarations) -> Array[Hash[Symbol, untyped]]
    def self.extract_definitions: (Array[untyped] declarations) -> Array[Hash[Symbol, untyped]]
    def self.translate_class_declaration: (untyped decl, ?String? full_name) -> Hash[Symbol, untyped]
    def self.translate_module_declaration: (untyped decl, ?String? full_name) -> Hash[Symbol, untyped]

    private

    def self.translate_declarations: (Array[untyped] declarations) -> Array[Hash[Symbol, untyped]]
    def self.translate_single_declaration: (untyped decl) -> Hash[Symbol, untyped]?
    def self.extract_methods_from_members: (Array[untyped] members) -> Array[untyped]
    def self.extract_inner_classes: (Array[untyped] members) -> Array[Hash[Symbol, untyped]]
    def self.inner_class?: (Hash[Symbol, untyped] nested_definition, untyped parent_declaration) -> bool

    class ASTTranslator
      def self.translate_nested_declarations: (Array[untyped] members, String parent_name) -> Array[Hash[Symbol, untyped]]
      def self.translate_single_declaration_with_name: (untyped decl, String full_name) -> Hash[Symbol, untyped]?
      def self.extract_superclass: (untyped class_decl) -> String?
      def self.extract_includes: (Array[untyped] members) -> Array[String]
      def self.extract_extends: (Array[untyped] members) -> Array[String]
      def self.determine_namespace_usage: (Array[untyped] members) -> bool
      def self.class_declaration?: (untyped decl) -> bool
      def self.module_declaration?: (untyped decl) -> bool
      def self.nestable_declaration?: (untyped decl) -> bool
      def self.include_member?: (untyped member) -> bool
      def self.extend_member?: (untyped member) -> bool
      def self.method_definition?: (untyped member) -> bool

      private

      def self.find_nested_declarations: (Array[untyped] members) -> Array[untyped]
    end

    class MethodParameter
      def self.extract: (untyped method_type) -> Hash[Symbol, untyped]

      private

      def self.extract_block_parameter: (untyped method_type) -> Hash[Symbol, untyped]?
      def self.build_block_parameters: (untyped block) -> Array[Parameter]
      def self.extract_required_positional_parameters: (untyped method_type) -> Array[Parameter]
      def self.extract_optional_positional_parameters: (untyped method_type) -> Array[Parameter]
      def self.extract_rest_positional_parameters: (untyped method_type) -> Array[Parameter]
      def self.extract_required_keyword_parameters: (untyped method_type) -> Array[Parameter]
      def self.extract_optional_keyword_parameters: (untyped method_type) -> Array[Parameter]
      def self.extract_rest_keyword_parameters: (untyped method_type) -> Array[Parameter]
      def self.build_parameter_hash: (untyped name, untyped type, String kind, ?String? default_name) -> Parameter
    end

    class Method
      def self.extract_from_members: (Array[untyped] members) -> Array[untyped]

      private

      def self.extract_method_definitions: (Array[untyped] members) -> Array[untyped]
      def self.convert_method_definition: (untyped method_def) -> Hash[Symbol, untyped]
      def self.extract_method_types: (untyped method_def) -> Array[untyped]
      def self.convert_method_type: (untyped method_type, String method_name, String visibility) -> Hash[Symbol, untyped]
      def self.determine_method_type: (untyped method_def) -> String
      def self.extract_visibility: (untyped method_def) -> String
      def self.extract_signature: (untyped member, String visibility) -> Hash[Symbol, untyped]?
      def self.format_attribute: (untyped attr, String visibility, Symbol attr_type) -> Hash[Symbol, untyped]
      def self.format_method_definition: (untyped method_def, String visibility) -> Hash[Symbol, untyped]
      def self.build_overloads: (Array[untyped] overloads) -> Array[Hash[Symbol, untyped]]
      def self.build_overload_item: (Hash[Symbol, untyped] overload_param_info, untyped overload_method_type) -> Hash[Symbol, untyped]
      def self.build_method_result: (untyped method_def, String visibility, Hash[Symbol, untyped] param_info, untyped primary_method_type, Array[Hash[Symbol, untyped]] overloads) -> Hash[Symbol, untyped]
    end
  end
end