# Result - RBS解析結果を集約するデータクラス

# RBS解析結果を集約するデータクラス（実装詳細）
class Result
  private

  @definitions: Array[definition_hash]
  @parsed_at: Time

  attr_reader definitions: Array[definition_hash]
  attr_reader parsed_at: Time



  # ベースノードクラス
  class Node
    attr_reader name: String
    attr_reader type: Symbol
    attr_reader children: Array[Result::Node]

    def initialize: (name: String, type: Symbol, ?children: Array[Result::Node]) -> void
    def add_child: (Result::Node child) -> void
    def find_by_type: (Symbol target_type) -> Array[Result::Node]
  end

  # クラスノード
  class ClassNode < Result::Node
    include _ClassNode

    private

    @superclass: String?
    @includes: Array[String]
    @extends: Array[String]

    public

    %a{override}
    def initialize: (name: String, ?superclass: String?, ?includes: Array[String], ?extends: Array[String]) -> void
    def self.from_hash: (definition_hash class_def) -> Result::ClassNode
    def add_relationship: (Result::RelationshipNode relationship_node) -> void

    private

    def extract_method_nodes: () -> Array[Result::MethodNode]
    def extract_relationship_nodes: () -> Array[Result::RelationshipNode]
    def select_methods_by_visibility_and_type: (Array[_FormatterResultMethod] methods, String visibility, String method_type) -> Array[_FormatterResultMethod]
  end

  # モジュールノード
  class ModuleNode < Result::Node
    include _Node

    private

    @includes: Array[String]
    @extends: Array[String]
    @is_namespace: bool

    public

    %a{override}
    def initialize: (name: String, ?includes: Array[String], ?extends: Array[String], ?is_namespace: bool) -> void
    def self.from_hash: (definition_hash module_def) -> Result::ModuleNode
    def add_relationship: (Result::RelationshipNode relationship_node) -> void

    private

    def extract_relationship_nodes: () -> Array[Result::RelationshipNode]
    def select_methods_by_visibility_and_type: (Array[_FormatterResultMethod] methods, String visibility, String method_type) -> Array[_FormatterResultMethod]
  end

  # 関係性ノード
  class RelationshipNode < Result::Node

    %a{override}
    def initialize: (name: String, relationship_type: Symbol, from: String, to: String) -> void
    def inheritance?: () -> bool
    def delegation?: () -> bool
    def relationship_type: () -> Symbol
    def from: () -> String
    def to: () -> String

    private

    @relationship_type: Symbol
    @from: String
    @to: String
  end

  # メソッドノード
  class MethodNode < Result::Node
    include _FormatterResultMethod

    @method_type: String
    @visibility: String
    @parameters: Array[Parameter]
    @return_type: String
    @overloads: Array[Hash[Symbol, untyped]]
    @block: Result::BlockNode?

    def initialize: (name: String, method_type: String, visibility: String, parameters: Array[Parameter], return_type: String, ?overloads: Array[Hash[Symbol, untyped]], ?block: Result::BlockNode?) -> void
    def self.from_hash: (Hash[Symbol, untyped] method_hash) -> Result::MethodNode

    private

    def param_signature: (Parameter param) -> String
    def self.build_parameters: (Array[Parameter | Hash[Symbol, String]] param_objects) -> Array[Parameter]
    def self.build_block: (Hash[Symbol, untyped]? block_hash) -> Result::BlockNode?

  end

  # ブロックノード
  class BlockNode < Result::Node
    @parameters: Array[Parameter]
    @return_type: String

    attr_reader parameters: Array[Parameter]
    attr_reader return_type: String

    def initialize: (parameters: Array[Parameter], return_type: String) -> void
    def self.from_hash: (Hash[Symbol, untyped]? block_hash) -> Result::BlockNode?
  end

  # ノード構築を担当するクラス
  class NodeBuilder
    @definition: definition_hash
    
    def self.build_class_node: (definition_hash class_def) -> Result::ClassNode
    def self.build_module_node: (definition_hash module_def) -> Result::ModuleNode
    def initialize: (definition_hash definition) -> void
    def build_class_node: () -> Result::ClassNode
    def build_module_node: () -> Result::ModuleNode

    private
    
    attr_reader definition: definition_hash
    
    def add_methods_to_node: ((Result::ClassNode | Result::ModuleNode) node, Array[Hash[Symbol, untyped]] methods) -> void
    def add_inheritance_relationship: (Result::ClassNode class_node) -> void
    def add_delegation_relationships: (Result::ClassNode class_node) -> void
    def add_include_relationships: (Result::ModuleNode module_node) -> void
    def add_extend_relationships: (Result::ModuleNode module_node) -> void
    def builtin_class?: (String type_name) -> bool
  end
end