# Result - RBS解析結果を集約するデータクラス

# RBS解析結果を集約するデータクラス（実装詳細）
class Result
  private

  @definitions: Array[definition_hash]
  @parsed_at: Time

  attr_reader definitions: Array[definition_hash]
  attr_reader parsed_at: Time



  # ベースノードクラス
  class Node
    attr_reader name: String
    attr_reader type: Symbol
    attr_reader children: Array[Result::Node]

    def initialize: (name: String, type: Symbol, ?children: Array[Result::Node]) -> void
    def add_child: (Result::Node child) -> void
    def find_by_type: (Symbol target_type) -> Array[Result::Node]
  end

  # ノードエンティティモジュール
  module NodeEntity
    # クラスノード
    class Class < Result::Node
      include _ClassNode

      private

      @superclass: String?
      @includes: Array[String]
      @extends: Array[String]
      @inner_classes: Array[Result::NodeEntity::InnerClass]

      public

      %a{override}
      def initialize: (name: String, ?superclass: String?, ?includes: Array[String], ?extends: Array[String], ?inner_classes: Array[Result::NodeEntity::InnerClass]) -> void
      def self.from_hash: (definition_hash class_def) -> Result::NodeEntity::Class
      def add_relationship: (Result::NodeEntity::Relationship relationship_node) -> void

      private

      def self.build_inner_class_node: (Hash[Symbol, untyped] inner_class_hash, definition_hash class_def) -> Result::NodeEntity::InnerClass
      def extract_method_nodes: () -> Array[Result::NodeEntity::Method]
      def extract_relationship_nodes: () -> Array[Result::NodeEntity::Relationship]
      def select_methods_by_visibility_and_type: (Array[_FormatterResultMethod] methods, String visibility, String method_type) -> Array[_FormatterResultMethod]
    end

    # インナークラスノード
    class InnerClass < Result::Node
      include _InnerClassNode

      private

      @superclass: String?
      @includes: Array[String]
      @extends: Array[String]

      public

      attr_reader superclass: String?

      %a{override}
      def initialize: (name: String, ?superclass: String?, ?includes: Array[String], ?extends: Array[String]) -> void
      def self.from_hash: (Hash[Symbol, untyped] class_def) -> Result::NodeEntity::InnerClass
      def add_relationship: (Result::NodeEntity::Relationship relationship_node) -> void
      def method_class?: () -> bool

      private

      def extract_method_nodes: () -> Array[Result::NodeEntity::Method]
      def extract_relationship_nodes: () -> Array[Result::NodeEntity::Relationship]
      def select_methods_by_visibility_and_type: (Array[_FormatterResultMethod] methods, String visibility, String method_type) -> Array[_FormatterResultMethod]
    end

    # モジュールノード
    class Module < Result::Node
      include _Node

      private

      @includes: Array[String]
      @extends: Array[String]
      @is_namespace: bool

      public

      %a{override}
      def initialize: (name: String, ?includes: Array[String], ?extends: Array[String], ?is_namespace: bool) -> void
      def self.from_hash: (definition_hash module_def) -> Result::NodeEntity::Module
      def add_relationship: (Result::NodeEntity::Relationship relationship_node) -> void

      private

      def extract_relationship_nodes: () -> Array[Result::NodeEntity::Relationship]
      def select_methods_by_visibility_and_type: (Array[_FormatterResultMethod] methods, String visibility, String method_type) -> Array[_FormatterResultMethod]
    end

    # 関係性ノード
    class Relationship < Result::Node

      %a{override}
      def initialize: (name: String, relationship_type: Symbol, from: String, to: String) -> void
      def inheritance?: () -> bool
      def delegation?: () -> bool
      def relationship_type: () -> Symbol
      def from: () -> String
      def to: () -> String

      private

      @relationship_type: Symbol
      @from: String
      @to: String
    end

    # メソッドノード
    class Method < Result::Node
      include _FormatterResultMethod

      @method_type: String
      @visibility: String
      @parameters: Array[Parameter]
      @return_type: String
      @overloads: Array[Hash[Symbol, untyped]]
      @block: Result::NodeEntity::Block?

      def initialize: (name: String, method_type: String, visibility: String, parameters: Array[Parameter], return_type: String, ?overloads: Array[Hash[Symbol, untyped]], ?block: Result::NodeEntity::Block?) -> void
      def self.from_hash: (Hash[Symbol, untyped] method_hash) -> Result::NodeEntity::Method

      private

      def param_signature: (Parameter param) -> String
      def self.build_parameters: (Array[Parameter | Hash[Symbol, String]] param_objects) -> Array[Parameter]
      def self.build_block: (Hash[Symbol, untyped]? block_hash) -> Result::NodeEntity::Block?

    end

    # ブロックノード
    class Block < Result::Node
      @parameters: Array[Parameter]
      @return_type: String

      attr_reader parameters: Array[Parameter]
      attr_reader return_type: String

      def initialize: (parameters: Array[Parameter], return_type: String) -> void
      def self.from_hash: (Hash[Symbol, untyped]? block_hash) -> Result::NodeEntity::Block?
    end
  end

  # ノード構築を担当するクラス
  class NodeBuilder
    @definition: definition_hash
    
    def self.build_class_node: (definition_hash class_def) -> Result::NodeEntity::Class
    def self.build_module_node: (definition_hash module_def) -> Result::NodeEntity::Module
    def self.build_inner_class_node: (Hash[Symbol, untyped] class_def) -> Result::NodeEntity::InnerClass
    def initialize: (definition_hash definition) -> void
    def build_class_node: () -> Result::NodeEntity::Class
    def build_module_node: () -> Result::NodeEntity::Module
    def build_inner_class_node: () -> Result::NodeEntity::InnerClass

    private
    
    attr_reader definition: definition_hash
    
    def add_methods_to_node: ((Result::NodeEntity::Class | Result::NodeEntity::Module | Result::NodeEntity::InnerClass) node, Array[Hash[Symbol, untyped]] methods) -> void
  end

  # 関係性追加を担当するクラス
  class RelationshipsAdder
    @node: (Result::NodeEntity::Class | Result::NodeEntity::Module | Result::NodeEntity::InnerClass)
    
    def self.add_inheritance: ((Result::NodeEntity::Class | Result::NodeEntity::InnerClass) node) -> void
    def self.add_delegation: ((Result::NodeEntity::Class | Result::NodeEntity::InnerClass) node) -> void
    def self.add_include: (Result::NodeEntity::Module node) -> void
    def self.add_extend: (Result::NodeEntity::Module node) -> void
    def initialize: ((Result::NodeEntity::Class | Result::NodeEntity::Module | Result::NodeEntity::InnerClass) node) -> void
    def add_inheritance: () -> void
    def add_delegation: () -> void
    def add_include: () -> void
    def add_extend: () -> void

    private
    
    attr_reader node: (Result::NodeEntity::Class | Result::NodeEntity::Module | Result::NodeEntity::InnerClass)
    
    def builtin_class?: (String type_name) -> bool
    def build_relationship_node_for_delegate: (_FormatterResultMethod method) -> Result::NodeEntity::Relationship
  end
end